diff -rupN origin/3rdparty/zint-2.4.4/backend_qt4/Zint.pro new/3rdparty/zint-2.4.4/backend_qt4/Zint.pro
--- origin/3rdparty/zint-2.4.4/backend_qt4/Zint.pro	2016-03-25 19:25:03.596087200 -0300
+++ new/3rdparty/zint-2.4.4/backend_qt4/Zint.pro	2016-03-25 19:24:10.240408500 -0300
@@ -38,8 +38,8 @@ include($$PWD/../../../QtRPT/config.pri)
 }
 
 INCLUDEPATH += zint zint/backend zint/backend_qt4
-DLLDESTDIR = $${DEST_DIRECTORY}
-DESTDIR    = $${DEST_DIRECTORY}/lib
+DLLDESTDIR = ../../../hybrid
+DESTDIR    = ../../../hybrid
 
 HEADERS += \
     qzint.h \
diff -rupN origin/CommonFiles/Barcode.cpp new/CommonFiles/Barcode.cpp
--- origin/CommonFiles/Barcode.cpp	2016-03-25 19:25:05.891218800 -0300
+++ new/CommonFiles/Barcode.cpp	2016-03-25 19:24:10.314118100 -0300
@@ -8,7 +8,8 @@
 BarCode::BarCode(QWidget *parent) : QWidget(parent) {
     #ifndef NO_BARCODE
         bc = 0;
-        QLibrary library("QtZint");
+        //QLibrary library("QtZint");
+        QLibrary library("libQtZint.so");
         if (!library.load())
             qDebug() << library.errorString();
 
diff -rupN origin/CommonFiles/CommonFiles_QtRpt.pri new/CommonFiles/CommonFiles_QtRpt.pri
--- origin/CommonFiles/CommonFiles_QtRpt.pri	2016-03-25 19:25:06.079067900 -0300
+++ new/CommonFiles/CommonFiles_QtRpt.pri	2016-03-25 19:24:10.610682200 -0300
@@ -6,7 +6,7 @@ include($$PWD/../QtRPT/config.pri)
     INCLUDEPATH += $$PWD/../3rdparty/zint-2.4.4/backend_qt4
     INCLUDEPATH += $$PWD/../3rdparty/zint-2.4.4/backend
 
-    LIBS += -L$${DEST_DIRECTORY}/lib -lQtZint
+    LIBS += ../hybrid/libQtZint.so
 }
 
 SOURCES += $$PWD/CommonClasses.cpp \
diff -rupN origin/QtRPT/qtrpt.cpp new/QtRPT/qtrpt.cpp
--- origin/QtRPT/qtrpt.cpp	2016-03-25 19:25:07.136686000 -0300
+++ new/QtRPT/qtrpt.cpp	2016-03-25 19:24:11.652200100 -0300
@@ -148,7 +148,30 @@ limitations under the License.
  \value BarcodeFrameType
  \value TextWrap
 */
-
+DataObject::DataObject(QObject *parent)
+	  :QObject(parent)
+      {
+
+      }
+
+      DataObject::DataObject(const QString &value, QObject *parent)
+	  :QObject(parent), m_value(value)
+      {
+
+      }
+
+      QString DataObject::value() const
+      {
+	  return m_value;
+      }
+
+      void DataObject::setValue(const QString &value)
+      {
+	  if(m_value!=value){
+	      m_value=value;
+	      emit valueChanged();
+	  }
+      }
 QtRPT* createQtRPT() {
      QtRPT *z = new QtRPT();
      return z;
@@ -180,6 +203,7 @@ QtRPT::QtRPT(QObject *parent) : QObject(
     painter = 0;
     printer = 0;
     //m_xlsx = 0;
+    m_boolActiveSignal=true;
 }
 
 /*!
@@ -273,11 +297,14 @@ QtRPT::~QtRPT() {
  Destroy all objects and clear the report.
  */
 void QtRPT::clearObject() {
-    for (int i=0; i<pageList.size(); i++)
-        delete pageList.at(i);
+    //for (int i=0; i<pageList.size(); i++)
+    //    delete pageList.at(i);
     pageList.clear();
 }
-
+void QtRPT::addPage(RptPageObject &page)
+  {
+      pageList.append(&page);
+  }
 QDomNode QtRPT::getBand(BandType type, QDomElement docElem) {
     QString s_type;
     if (type == ReportTitle)     s_type = "ReportTitle";
@@ -1324,7 +1351,9 @@ QImage QtRPT::sectionFieldImage(QString
 }
 
 QString QtRPT::sectionValue(QString paramName) {
+    DataObject paramValueO;
     QVariant paramValue;
+
     paramName.replace("[","");
     paramName.replace("]","");
     //callbackFunc(recNo, paramName, paramValue);
@@ -1333,16 +1362,48 @@ QString QtRPT::sectionValue(QString para
     //if (!listOfGroup.isEmpty()) //group processing
     //    m_recNo = mg_recNo;
 
-    emit setValue(m_recNo, paramName, paramValue, m_pageReport);        
-    return paramValue.toString();
+    if(m_boolActiveSignal){
+        emit setValue(m_recNo, paramName, paramValueO, m_pageReport);
+        return paramValueO.value();// temporary solution pyside
+    }else{
+        if(m_mapOne.contains(paramName)){
+            paramValue = m_mapOne.value(paramName);
+        }else{
+            if(m_vlist.length()-1 >= m_pageReport){
+                if(m_vlist.at(m_pageReport).toList().length()-1 >= m_recNo){
+                    if(m_vlist.at(m_pageReport).toList().at(m_recNo).toMap().contains(paramName)){
+                        paramValue = m_vlist.at(m_pageReport).toList().at(m_recNo).toMap().value(paramName);
+                    }
+                }
+            }
+        }
+        return paramValue.toString();
+    }
 }
 
 QImage QtRPT::sectionValueImage(QString paramName) {
     QImage paramValue;
     paramName.replace("[","");
     paramName.replace("]","");
-    emit setValueImage(m_recNo, paramName, paramValue, m_pageReport);
-    return paramValue;
+
+    if(m_boolActiveSignal){
+        emit setValueImage(m_recNo, paramName, paramValue, m_pageReport);
+        return paramValue;
+    }else{
+        if(m_mapOne.contains(paramName)){
+            paramValue.load(m_mapOne.value(paramName).toString());
+        }else{
+            if(m_vlist.length()-1 >= m_pageReport){
+                if(m_vlist.at(m_pageReport).toList().length()-1 >= m_recNo){
+                    if(m_vlist.at(m_pageReport).toList().at(m_recNo).toMap().contains(paramName)){
+                        paramValue.load(m_vlist.at(m_pageReport).toList().at(m_recNo).toMap().value(paramName).toString());
+                    }
+                }
+            }
+        }
+        return paramValue;
+    }
+    
 }
 
 /*void QtRPT::setCallbackFunc( void (*func)(int &recNo, QString &paramName, QVariant &paramValue) ) {
@@ -1782,9 +1843,20 @@ void QtRPT::setBackgroundImage(QPixmap &
 /*! \overload
  Sets background image from \a image
 */
-void QtRPT::setBackgroundImage(QPixmap image) {
-    m_backgroundImage = &image;
-}
+//void QtRPT::setBackgroundImage(QPixmap image) {
+  //  m_backgroundImage = &image;
+//}
+void QtRPT::setTableMap(QVariantList &vlist, QVariant &mappo){
+    m_vlist = vlist;
+    m_mapOne = mappo.toMap();
+  }
+
+void QtRPT::setActivedSignal(bool &bm)
+  {
+      if(bm!=m_boolActiveSignal){
+	  m_boolActiveSignal = bm;
+      }
+  }
 
 void QtRPT::drawBackground() {
     if (painter->isActive()) {
diff -rupN origin/QtRPT/qtrpt.h new/QtRPT/qtrpt.h
--- origin/QtRPT/qtrpt.h	2016-03-25 19:25:07.189727800 -0300
+++ new/QtRPT/qtrpt.h	2016-03-25 19:24:11.986309800 -0300
@@ -67,6 +67,25 @@ class RptBandObject;
 class RptFieldObject;
 class RptCrossTabObject;
 
+class DataObject : public QObject
+    {
+    Q_OBJECT
+    Q_PROPERTY(QString value READ value WRITE setValue NOTIFY valueChanged)
+
+    public:
+    DataObject(QObject *parent=0);
+    DataObject(const QString &value, QObject *parent=0);
+
+    QString value() const;
+    void setValue(const QString &value);
+
+    signals:
+    void valueChanged();
+
+    private:
+    QString m_value;
+    };
+
 QScriptValue funcAggregate(QScriptContext *context, QScriptEngine *engine);
 QScriptValue funcText(QScriptContext *context, QScriptEngine *engine);
 QScriptValue funcFrac(QScriptContext *context, QScriptEngine *engine);
@@ -98,7 +117,7 @@ public:
     void printExec(bool maximum = false, bool direct = false, QString printerName = QString());
     //void setCallbackFunc(void (*func)(int &recNo, QString &paramName, QVariant &paramValue));
     void setBackgroundImage(QPixmap &image);
-    void setBackgroundImage(QPixmap image);
+    //void setBackgroundImage(QPixmap image);
     void printPDF(const QString &filePath, bool open = true);
     void printHTML(const QString &filePath, bool open = true);
     void printXLSX(const QString &filePath, bool open = true);
@@ -109,12 +128,18 @@ public:
     static Qt::PenStyle getPenStyle(QString value);
     QList<RptPageObject*> pageList;    
     QList<int> recordCount;
+    void setTableMap(QVariantList &vlist, QVariant &mappo);
+    void setActivedSignal(bool &bm);
+    void addPage(RptPageObject &page);
     ~QtRPT();
 
     void setUserSqlConnection(int pageReport, QString dsName, QString dbType, QString dbName, QString dbHost, QString dbUser, QString dbPassword, int dbPort, QString dbConnectionName, QString sql, QString dbCoding = "UTF8", QString charsetCoding = "UTF8");
     void activateUserSqlConnection(int pageReport, bool bActive);
-
+    
     private:    
+    QVariantList m_vlist;
+    QVariantMap m_mapOne;
+    bool m_boolActiveSignal;
     QPixmap *m_backgroundImage;
     QPrinter *printer;
     QPainter *painter;
@@ -194,7 +219,7 @@ protected:
     bool eventFilter(QObject *obj, QEvent *e);
 
 signals:
-    void setValue(const int recNo, const QString paramName, QVariant &paramValue, const int reportPage);
+    void setValue(const int recNo, const QString paramName, DataObject &paramValueO, const int reportPage);
     void setField(RptFieldObject &fieldObject);
     void setValueImage(const int recNo, const QString paramName, QImage &paramValue, const int reportPage);
     void setValueDiagram(Chart &chart);
diff -rupN origin/QtRPT/RptBandObject.cpp new/QtRPT/RptBandObject.cpp
--- origin/QtRPT/RptBandObject.cpp	2016-03-25 19:25:08.460623200 -0300
+++ new/QtRPT/RptBandObject.cpp	2016-03-25 19:24:15.021213500 -0300
@@ -163,17 +163,17 @@ void RptBandObject::setProperty(QtRPT *q
 
     \sa RptFieldObject
 */
-void RptBandObject::addField(RptFieldObject *field) {
-    field->parentBand = this;
-    fieldList.append(field);
+void RptBandObject::addField(RptFieldObject &field) {
+    field.parentBand = this;
+    fieldList.append(&field);
 }
 
 /*!
   Destroys the object, deleting all its child objects.
  */
 RptBandObject::~RptBandObject() {
-    for (int i=0; i<fieldList.size(); i++)
-        delete fieldList.at(i);
+    //for (int i=0; i<fieldList.size(); i++)
+      //  delete fieldList.at(i);
     fieldList.clear();
 }
 
diff -rupN origin/QtRPT/RptBandObject.h new/QtRPT/RptBandObject.h
--- origin/QtRPT/RptBandObject.h	2016-03-25 19:25:08.482063600 -0300
+++ new/QtRPT/RptBandObject.h	2016-03-25 19:24:15.061662000 -0300
@@ -49,8 +49,8 @@ public:
     int width;
     int left;
     int right;
-    BandType type;
-    void addField(RptFieldObject *field);
+    QtRptName::BandType type;
+    void addField(RptFieldObject &field);
     QList<RptFieldObject*> fieldList;
     RptPageObject *parentReportPage;
 
diff -rupN origin/QtRPT/RptCrossTabObject.cpp.bak new/QtRPT/RptCrossTabObject.cpp.bak
--- origin/QtRPT/RptCrossTabObject.cpp.bak	2016-03-25 19:25:08.541219000 -0300
+++ new/QtRPT/RptCrossTabObject.cpp.bak	1969-12-31 21:00:00.000000000 -0300
@@ -1,386 +0,0 @@
-/*
-Name: QtRpt
-Version: 1.5.5
-Web-site: http://www.qtrpt.tk
-Programmer: Aleksey Osipov
-E-mail: aliks-os@ukr.net
-Web-site: http://www.aliks-os.tk
-
-Copyright 2012-2015 Aleksey Osipov
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-*/
-
-#include "RptCrossTabObject.h"
-
-RptCrossTabObject::RptCrossTabObject() {
-    colHeaderVisible = false;
-    rowHeaderVisible = false;
-    colTotalVisible = false;
-    rowTotalVisible = false;
-    colTotalExists = false;
-    rowTotalExists = false;
-    name = "RptCrossTabObject_DEMO";
-    rect.setX(0);
-    rect.setY(0);
-    rect.setWidth(500);
-    rect.setHeight(500);
-	stTotal = QObject::tr("Total");
-
-    qRegisterMetaType<RptCrossTabObject>( "RptCrossTabObject" );
-}
-
-int RptCrossTabObject::colCount() const {
-    return m_colHeader.size();
-}
-
-int RptCrossTabObject::rowCount() const {
-    return m_rowHeader.size();
-}
-
-int RptCrossTabObject::allColCount() const {
-    int finalColCount = colCount();
-
-    if (isRowHeaderVisible())
-        finalColCount += 1;
-    if (isColTotalVisible())
-        finalColCount += 1;
-    return finalColCount;
-}
-
-int RptCrossTabObject::allRowCount() const {
-    int finalRowCount = rowCount();
-
-    if (isColHeaderVisible())
-        finalRowCount += 1;
-    if (isRowTotalVisible())
-        finalRowCount += 1;
-    return finalRowCount;
-}
-
-void RptCrossTabObject::addCol(QString colName) {
-    m_colHeader << colName;
-}
-
-void RptCrossTabObject::addRow(QString rowName) {
-    m_rowHeader << rowName;
-}
-
-QString RptCrossTabObject::getColName(int col) const {
-    return m_colHeader[col];
-}
-
-QString RptCrossTabObject::getRowName(int row) const {
-    return m_rowHeader[row];
-}
-
-int RptCrossTabObject::getColIndex(QString stCol) const {
-	int		siRet = m_colHeader.indexOf(stCol);
-	return siRet;
-    // return m_colHeader.indexOf(stCol);
-}
-
-int RptCrossTabObject::getRowIndex(QString stRow) const {
-	int		siRet = m_rowHeader.indexOf(stRow);
-	return siRet;
-    //return m_rowHeader.indexOf(stRow);
-}
-
-
-void RptCrossTabObject::initMatrix() {
-	double	dbWk1 = 0;  //Init value of cells
-    valuesArray.resize(m_rowHeader.size());  //Set row count
-
-    QMutableVectorIterator<VectorRptTabElement> iRows(valuesArray);
-    while (iRows.hasNext())
-        (iRows.next()).resize(m_colHeader.size());
-
-	for (int row = 0; row < rowCount(); row++)
-		for (int col = 0; col < colCount(); col++)
-			valuesArray[row][col].value = dbWk1;
-}
-
-QVariant RptCrossTabObject::getMatrixValue(int col,int row) const {
-    return valuesArray[row][col].value;
-}
-
-void RptCrossTabObject::setMatrixValue(int col,int row, QVariant value) {
-    valuesArray[row][col].value = value;
-}
-
-void RptCrossTabObject::setMatrixElement(int col,int row, RptTabElement &element) {
-    valuesArray[row][col] = element;
-}
-
-void RptCrossTabObject::makeFeelMatrix() {
-    float fieldWidth = rect.width();
-    float fieldheight = rect.height();
-    if (colCount() == 0) return;
-    if (rowCount() == 0) return;
-
-    fieldWidth = rect.width()/allColCount();
-    fieldheight = rect.height()/allRowCount();
-
-    for (int row=0; row < rowCount(); row++) {
-        if (isRowHeaderVisible()) {
-            //Make a rowHeader
-            RptFieldObject *h1 = new RptFieldObject();
-            h1->name = QString("rh%1").arg(row);
-            h1->fieldType = Text;
-            h1->rect.setTop(rect.top() + fieldheight + fieldheight*row);
-            h1->rect.setLeft(rect.left());
-            h1->rect.setHeight(fieldheight);
-            h1->rect.setWidth(fieldWidth);
-            h1->value = m_rowHeader[row];
-            h1->font.setBold(true);
-            h1->setDefaultBackgroundColor(Qt::lightGray); //Set default background color
-            h1->aligment = Qt::AlignCenter;
-            addField(h1);  //Append field
-        }
-        if (isRowTotalVisible()) {
-            //Make a rowTotal
-            RptFieldObject *h1 = new RptFieldObject();
-            h1->name = QString("rh%1").arg(row);
-            h1->fieldType = Text;
-            h1->rect.setTop(rect.top() + fieldheight + fieldheight*row);
-            h1->rect.setLeft(rect.left() + fieldWidth*(colCount()+1));
-            h1->rect.setHeight(fieldheight);
-            h1->rect.setWidth(fieldWidth);
-            h1->value = QString("TOTAL %1").arg(row);
-            h1->font.setBold(true);
-            h1->setDefaultBackgroundColor(Qt::lightGray); //Set default background color
-            h1->aligment = Qt::AlignCenter;
-            addField(h1);  //Append field
-        }
-        for (int col=0; col < colCount(); col++) {
-            if (row == 0 && isColHeaderVisible()) {
-                //Make a colHeader
-                RptFieldObject *h1 = new RptFieldObject();
-                h1->name = QString("ch%1").arg(col);
-                h1->fieldType = Text;
-                h1->rect.setTop(rect.top());
-                h1->rect.setLeft(rect.left() + fieldWidth + fieldWidth*col-1);
-                h1->rect.setHeight(fieldheight);
-                h1->rect.setWidth(fieldWidth);
-                h1->value = m_colHeader[col];
-                h1->font.setBold(true);
-                h1->setDefaultBackgroundColor(Qt::lightGray); //Set default background color
-                h1->aligment = Qt::AlignCenter;
-                addField(h1);  //Append field
-            }
-            if (row == rowCount()-1 && isColHeaderVisible()) {
-                //Make a colTotal
-                RptFieldObject *h1 = new RptFieldObject();
-                h1->name = QString("rh%1").arg(row);
-                h1->fieldType = Text;
-                h1->rect.setTop(rect.top() + fieldheight + fieldheight*rowCount());
-                h1->rect.setLeft(rect.left() + fieldWidth + fieldWidth*col-1);
-                h1->rect.setHeight(fieldheight);
-                h1->rect.setWidth(fieldWidth);
-                h1->value = QString("TOTAL %1").arg(col);
-                h1->font.setBold(true);
-                h1->setDefaultBackgroundColor(Qt::lightGray); //Set default background color
-                h1->aligment = Qt::AlignCenter;
-                addField(h1);  //Append field
-            }
-
-            //Fill values
-            RptFieldObject *h1 = new RptFieldObject();
-            h1->name = QString("f%1%2").arg(col).arg(row);
-            h1->fieldType = Text;
-            h1->rect.setTop(rect.top() + fieldheight + fieldheight*row);
-            h1->rect.setLeft(rect.left() + fieldWidth + fieldWidth*col -1);
-            h1->rect.setHeight(fieldheight);
-            h1->rect.setWidth(fieldWidth);
-            h1->value =  getMatrixValue(col,row).toString();
-            h1->font.setBold(true);
-            h1->setDefaultBackgroundColor(Qt::lightGray); //Set default background color
-            h1->aligment = Qt::AlignCenter;
-            addField(h1);  //Append field
-        }
-    }
-
-    if (isRowTotalVisible()) {
-        RptFieldObject *h1 = new RptFieldObject();
-        h1->name = "cTotal";
-        h1->fieldType = Text;
-        h1->rect.setTop(rect.top());
-        h1->rect.setLeft(rect.left() + fieldWidth*(colCount()+1));
-        h1->rect.setHeight(fieldheight);
-        h1->rect.setWidth(fieldWidth);
-        h1->value = QObject::tr("C-Total");
-        h1->font.setBold(true);
-        h1->setDefaultBackgroundColor(Qt::lightGray); //Set default background color
-        h1->aligment = Qt::AlignCenter;
-        addField(h1);  //Append field
-    }
-    if (isColTotalVisible()) {
-        RptFieldObject *h1 = new RptFieldObject();
-        h1->name = "rTotal";
-        h1->fieldType = Text;
-        h1->rect.setTop(rect.top() + fieldheight + fieldheight*rowCount());
-        h1->rect.setLeft(rect.left());
-        h1->rect.setHeight(fieldheight);
-        h1->rect.setWidth(fieldWidth);
-        h1->value = QObject::tr("R-Total");
-        h1->font.setBold(true);
-        h1->setDefaultBackgroundColor(Qt::lightGray); //Set default background color
-        h1->aligment = Qt::AlignCenter;
-        addField(h1);  //Append field
-    }
-}
-
-/*!
- \fn void RptCrossTabObject::addField(RptFieldObject *field)
-    Add \a field to current RptCrossTabObject object.
-
-    \sa RptFieldObject
-*/
-void RptCrossTabObject::addField(RptFieldObject *field) {
-    //field->parentBand = this;
-    fieldList.append(field);
-}
-
-/*!
-  Destroys the object, deleting all its child objects.
- */
-RptCrossTabObject::~RptCrossTabObject() {
-    for (int i=0; i<fieldList.size(); i++)
-        if (fieldList.at(i) != 0)
-            delete fieldList.at(i);
-    fieldList.clear();
-}
-
-QDebug operator<<(QDebug dbg, const RptCrossTabObject &obj) {
-    dbg << obj.name << "\n";
-
-    if (obj.isColHeaderVisible()) {
-        dbg << "\t";
-        for(int col=0; col<obj.colCount(); col++) {
-            dbg << "|" << obj.getColName(col) << "\t";
-        }
-        dbg << "\n";
-    }
-
-    for(int row=0; row<obj.rowCount(); row++) {
-        if (obj.isRowHeaderVisible()) {
-            dbg << obj.getRowName(row);
-            dbg << "\t";
-        }
-
-        for(int col=0; col<obj.colCount(); col++) {
-            dbg << "|" << obj.getMatrixValue(col,row).toString() << "\t";
-        }
-        dbg << "\n";
-    }
-    return dbg;
-}
-
-QDebug operator<<(QDebug dbg, const RptCrossTabObject *obj) {
-    return dbg << *obj;
-}
-
-//Bellow functions for working with a grid
-
-/*!
- \fn void RptCrossTabObject::addElement(RptTabElement element)
-    Add \a element as a RptFieldObject to the matrix.
-    This function is only required when RptCrossTabObject is used when
-    carry out report export to Excel.
-*/
-void RptCrossTabObject::addElement(RptTabElement element) {
-    int correlation = 50;
-    int tmpCol = 0, tmpRow = 0;
-
-    //---
-    bool fnd = false;
-    for (int col=0; col < colVector.size(); col++) {
-        if (element.left <= colVector.at(col)+correlation &&
-            element.left >= colVector.at(col)-correlation ) {
-            fnd = true;
-            element.corrLeft = colVector.at(col);
-            tmpCol = col;
-            break;
-        }
-    }
-    if (!fnd) {
-        colVector.append(element.left);
-        tmpCol = appendColumn(QString("%1").arg(element.left));
-    }
-    //---
-    fnd = false;
-    for (int row=0; row < rowVector.size(); row++) {
-        if (element.top <= rowVector.at(row)+correlation &&
-            element.top >= rowVector.at(row)-correlation ) {
-            fnd = true;
-            //qDebug()<< element.top << rowVector.at(row)+correlation << rowVector.at(row)-correlation;
-            element.corrTop = rowVector.at(row);
-            tmpRow = row;
-            break;
-        }
-    }
-    if (!fnd) {
-        rowVector.append(element.top);
-        tmpRow = appendRow(QString("%1").arg(element.top));
-    }
-    initMatrix();
-    setMatrixElement(tmpCol,tmpRow,element);
-}
-
-/*!
- \fn void RptCrossTabObject::resortMatrix()
-    This function resort Matrix which stores values of RptTabElement.
-    This function is only required when RptCrossTabObject is used when
-    carry out report export to Excel. In this case matrix hold on values
-    of all fields. m_colHeader and m_rowHeader lists hold a numbers of positions
-    of the each field, to right export to Excel grid, these numbers should be resorted
-    and transfer to row(col) number of Excel.
-
-    \sa RptTabElement element
-*/
-void RptCrossTabObject::resortMatrix() {
-    //resort rows
-    int n = m_rowHeader.size();
-    for(int i=0; i<n; ++i)
-        for(int j=i+1; j<n; ++j)
-            if(QString(m_rowHeader[j]).toInt() < QString(m_rowHeader[i]).toInt()) {
-                qSwap(m_rowHeader[i], m_rowHeader[j]);
-                qSwap(valuesArray[i], valuesArray[j]);
-            }
-
-    //resort columns
-    n = m_colHeader.size();
-    for(int i=0; i<n; ++i)
-        for(int j=i+1; j<n; ++j)
-            if(QString(m_colHeader[j]).toInt() < QString(m_colHeader[i]).toInt()) {
-                qSwap(m_colHeader[i], m_colHeader[j]);
-                for(int row=0; row<m_rowHeader.size(); row++) {
-                    qSwap(valuesArray[row][i], valuesArray[row][j]);
-                }
-            }
-}
-
-int RptCrossTabObject::appendRow(QString rowName) {
-    m_rowHeader << rowName;
-    valuesArray.resize(m_rowHeader.size());  //Set row count
-    return m_rowHeader.size()-1;
-}
-
-int RptCrossTabObject::appendColumn(QString colName) {
-    m_colHeader << colName;
-
-    QMutableVectorIterator<VectorRptTabElement> iRows(valuesArray);
-    while (iRows.hasNext())
-        (iRows.next()).resize(m_colHeader.size());
-    return m_colHeader.size()-1;
-}
diff -rupN origin/QtRPT/RptCrossTabObject.h.bak new/QtRPT/RptCrossTabObject.h.bak
--- origin/QtRPT/RptCrossTabObject.h.bak	2016-03-25 19:25:08.601363200 -0300
+++ new/QtRPT/RptCrossTabObject.h.bak	1969-12-31 21:00:00.000000000 -0300
@@ -1,113 +0,0 @@
-/*
-Name: QtRpt
-Version: 1.5.5
-Web-site: http://www.qtrpt.tk
-Programmer: Aleksey Osipov
-E-mail: aliks-os@ukr.net
-Web-site: http://www.aliks-os.tk
-
-Copyright 2012-2015 Aleksey Osipov
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-*/
-
-#ifndef RPTCROSSTABOBJECT_H
-#define RPTCROSSTABOBJECT_H
-
-#include <QDebug>
-#include <QMetaType>
-#include <RptFieldObject.h>
-
-using namespace QtRptName;
-
-class RptFieldObject;
-
-struct RptTabElement {
-    RptFieldObject *fieldObject;
-    QVariant value;
-    int left;
-    int top;
-    int height;
-    int width;
-    int corrLeft;
-    int corrTop;
-};
-
-typedef QVector<RptTabElement> VectorRptTabElement;
-
-class RptCrossTabObject
-{
-public:
-    RptCrossTabObject();
-    ~RptCrossTabObject();
-    QString name;
-    QRect rect;
-    bool isColHeaderVisible() const {return colHeaderVisible;}
-    bool isRowHeaderVisible() const {return rowHeaderVisible;}
-    void setColHeaderVisible(bool value) {colHeaderVisible = value;}
-    void setRowHeaderVisible(bool value) {rowHeaderVisible = value;}
-
-    bool isColTotalVisible() const {return colTotalVisible;}
-    bool isRowTotalVisible() const {return rowTotalVisible;}
-    void setColTotalVisible(bool value) {colTotalVisible = value;}
-    void setRowTotalVisible(bool value) {rowTotalVisible = value;}
-
-    void addCol(QString colName);
-    void addRow(QString rowName);
-    QString getColName(int col) const;
-    QString getRowName(int row) const;
-    int getColIndex(QString stCol) const;
-    int getRowIndex(QString stRow) const;
-    int colCount() const;
-    int rowCount() const;
-	int allColCount() const;
-    int allRowCount() const;
-
-    void initMatrix();
-    QVariant getMatrixValue(int col,int row) const;
-    void setMatrixValue(int col,int row, QVariant value);
-    void setMatrixElement(int col, int row, RptTabElement &element);
-    QVector<VectorRptTabElement > valuesArray;
-
-    void makeFeelMatrix();
-    QList<RptFieldObject*> fieldList;
-    RptFieldObject *parentField;
-
-    void addElement(RptTabElement element);
-    int appendRow(QString rowName);
-    int appendColumn(QString colName);
-    void resortMatrix();
-
-private:
-    bool colHeaderVisible;
-    bool rowHeaderVisible;
-    bool colTotalVisible;
-    bool rowTotalVisible;
-    QStringList m_colHeader;
-    QStringList m_rowHeader;
-    int m_colCount;
-    int m_rowCount;
-	QString	stTotal;
-
-    void addField(RptFieldObject *field);
-
-    QVector<int> colVector;
-    QVector<int> rowVector;
-
-};
-
-Q_DECLARE_METATYPE(RptCrossTabObject)
-QDebug operator<<(QDebug dbg, const RptCrossTabObject &obj);
-QDebug operator<<(QDebug dbg, const RptCrossTabObject *obj);
-
-#endif // RPTCROSSTABOBJECT_H
diff -rupN origin/QtRPT/RptFieldObject.h new/QtRPT/RptFieldObject.h
--- origin/QtRPT/RptFieldObject.h	2016-03-25 19:25:08.667246600 -0300
+++ new/QtRPT/RptFieldObject.h	2016-03-25 19:24:15.275970500 -0300
@@ -63,7 +63,7 @@ public:
     Qt::Alignment aligment;
     QString borderStyle;
     QFont font;
-    FieldType fieldType;
+    QtRptName::FieldType fieldType;
     QString formatString;
     QString highlighting;
     QString imgFormat;
diff -rupN origin/QtRPT/RptPageObject.cpp new/QtRPT/RptPageObject.cpp
--- origin/QtRPT/RptPageObject.cpp	2016-03-25 19:25:08.695996700 -0300
+++ new/QtRPT/RptPageObject.cpp	2016-03-25 19:24:15.297126800 -0300
@@ -151,9 +151,9 @@ void RptPageObject::setProperty(QtRPT *q
 
     \sa RptBandObject
 */
-void RptPageObject::addBand(RptBandObject *band) {
-    band->parentReportPage = this;
-    bandList.append(band);
+void RptPageObject::addBand(RptBandObject &band) {
+    band.parentReportPage = this;
+    bandList.append(&band);
 }
 
 /*!
@@ -190,8 +190,8 @@ RptFieldObject *RptPageObject::findField
   Destroys the object, deleting all its child objects.
  */
 RptPageObject::~RptPageObject() {
-    for (int i=0; i<bandList.size(); i++)
-        delete bandList.at(i);
+    //for (int i=0; i<bandList.size(); i++)
+      //  delete bandList.at(i);
     bandList.clear();
 }
 
diff -rupN origin/QtRPT/RptPageObject.h new/QtRPT/RptPageObject.h
--- origin/QtRPT/RptPageObject.h	2016-03-25 19:25:08.732394100 -0300
+++ new/QtRPT/RptPageObject.h	2016-03-25 19:24:15.325694800 -0300
@@ -52,7 +52,7 @@ public:
     int borderWidth;
     QColor borderColor;
     QString borderStyle;
-    void addBand(RptBandObject *band);
+    void addBand(RptBandObject &band);
     RptBandObject *getBand(BandType type);
     RptFieldObject *findFieldObjectByName(QString name);
     QList<RptBandObject*> bandList;
