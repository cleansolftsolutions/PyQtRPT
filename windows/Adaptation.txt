// numaelis@gmail.com
PyQtRPT
Python Binding for QtRPT
Python PySide Shiboken QtRPT
License(GPL) compatible with QtRPT, zint
or
LGPL only QtRPT.


""""""
QtRPT (http://www.qtrpt.tk/index.php)
Version 1.5.5
Programmer: Aleksey Osipov
Web-site: http://www.aliks-os.tk

Announcements:(http://www.qtrpt.tk/index.php?page=announcements.php)
License:

For a long time the QtRPT project is distributed under the LGPL license. This license allows you to dynamically link with your 
source code. In order to facilitate the user to use QtRPT and allow to produce statically linking, I decided to change the 
Apache 2.0 license.
License Apache 2.0 more permissive compared to LGPL, I hope that the transition will not create problems for you.
Please note that QtRPT to generate bar code uses the Zint library, which is distributed under license GPL, in this case,
you must use your project is also under this license or disable the use of the Zint library.
""""""


Instructions build:(tested in opensuse, python 3.4, PySide 1.2.4, Qt 4.8.6, qtRPTProject 1.5.5)

download qtRPTProject 1.5.5 and 
   copy in PyQtRPTDir:
  	CommonFiles
	QtRPT
	3rdparty 
	QtRptDesigner
   copy in package:
        QtRptDemo/examples/examples_report
	
final dir:
PyQtRPTDir/
  |-data/
  |	|-global.h
  |	|-typesystem.xml
  |-hybrid/
  |	|-hybrid.pro
  |-hybridpy/
  |	|-hybridpy.pro
  |-package/
  |	|-example1.py
  |     |-more examples ....
  |	|-examples_report/  from---> QtRptDemo/examples/
  |-CommonFiles/
  |-QtRPT/
  |-3rdparty/zint-2.4.4/
  |-QtRptDesigner/
  |-build.sh
<<<<<<<<<<<<<<<
if disable the use of the Zint library:
  *in QtRPT/QtRPT.pri uncomment #DEFINES += NO_BARCODE result: DEFINES += NO_BARCODE
  *in data/global.h delete lines:
      #include "../3rdparty/zint-2.4.4/backend_qt4/qzint.h"
      #include "../3rdparty/zint-2.4.4/backend_qt4/qzint_global.h"
  *in hybrid/Hybrid.pro uncomment #CONFIG += staticlib
  *in hybridpy/hybridpy.pro changue:
	../hybrid/QtRPTaps.lib \ 
	../hybrid/QtZint.lib
	for:
	../hybrid/QtRPTaps.lib
  *in buildHybridPy.bat delete lines:
      copy hybrid\QtRPTaps.dll package\QtRPTaps.dll /y 
	  copy hybrid\QtZint.dll package\QtZint.dll /y 
<<<<<<<<<<<<<<<
changue lines 41 y 42 the Zint.pro in 3rdparty/zint-2.4.4/backend_qt4
from:
DLLDESTDIR = $${DEST_DIRECTORY}
DESTDIR    = $${DEST_DIRECTORY}/lib
to
DLLDESTDIR = $${DEST_DIRECTORY}
DESTDIR    = $${DEST_DIRECTORY}
<<<<<<<<<<<<<
in QtRPT/config.pri
replace all to 
CONFIG(release, debug|release) {
    DEST_DIRECTORY = $$PWD/../hybrid
}

<<<<<<<<<<<
in QtRPT/qtrpt.h comment:
line 101:
  //void setBackgroundImage(QPixmap image);

in QtRPT/qtrpt.cpp comment:
line 1785:
//void QtRPT::setBackgroundImage(QPixmap image) {
//    m_backgroundImage = &image;
//}

<<<<<<<<<<<<<<<<
in commonclasses
line 916, 953, 960, 967 floor(number / 100) to floor((double)(number / 100))
in RptFielObject 
line 530 :
replace  nWidth = ((double)rint(nHeight * dblAspectRatio)) & -3; 
for 	nWidth = ((int)floor((double)((nHeight * dblAspectRatio)+0.5))) & -3;
line 535
replace    	nHeight = ((double)rint(nWidth / dblAspectRatio)) & -3;
for			nHeight = ((int)floor((double)((nWidth / dblAspectRatio)+0.5))) & -3;
<<<<<<<<<<<<<
despues de generar el shiboken
en rptsql_wrapper
en qtrpt wrapper 
en barcode_wrapper
en char_wrapper
en dataobject_wrapper     
agregar en public: const QMetaObject* metaObject() const;
           
<<<<<<<<<<<
in QtRPT/qtrpt.h
add in public:
    void setTableMap(QVariantList &vlist, QVariant &mappo);
    void setActivedSignal(bool &bm);
add in private:
    QVariantList m_vlist;
    QVariantMap m_mapOne;
    bool m_boolActiveSignal;
replace in signal setValue:
result:
    void setValue(const int recNo, const QString paramName, DataObject &paramValueO, const int reportPage);
    ------
in QtRPT/qtrpt.cpp:
add:
  void QtRPT::setTableMap(QVariantList &vlist, QVariant &mappo){
    m_vlist = vlist;
    m_mapOne = mappo.toMap();
  }

  void QtRPT::setActivedSignal(bool &bm)
  {
      if(bm!=m_boolActiveSignal){
	  m_boolActiveSignal = bm;
      }
  }
  
in QtRPT/qtrpt.cpp:
add in QtRPT::QtRPT(QObject *parent):
    m_boolActiveSignal=true;
    
in QtRPT/qtrpt.cpp:
replace and add, in "QString QtRPT::sectionValue(QString paramName)":
result:
    DataObject paramValueO;
    QVariant paramValue;

    paramName.replace("[","");
    paramName.replace("]","");
    //callbackFunc(recNo, paramName, paramValue);
    //if (paramValue.isNull())

    //if (!listOfGroup.isEmpty()) //group processing
    //    m_recNo = mg_recNo;

    if(m_boolActiveSignal){
        emit setValue(m_recNo, paramName, paramValueO, m_pageReport);
        return paramValueO.value();// temporary solution pyside
    }else{
        if(m_mapOne.contains(paramName)){
            paramValue = m_mapOne.value(paramName);
        }else{
            if(m_vlist.length()-1 >= m_pageReport){
                if(m_vlist.at(m_pageReport).toList().length()-1 >= m_recNo){
                    if(m_vlist.at(m_pageReport).toList().at(m_recNo).toMap().contains(paramName)){
                        paramValue = m_vlist.at(m_pageReport).toList().at(m_recNo).toMap().value(paramName);
                    }
                }
            }
        }
        return paramValue.toString();
    }
    
in QtRPT/qtrpt.cpp:
replace and add, in "QString QtRPT::sectionValueImage(QString paramName)":
result:
    QImage paramValue;
    paramName.replace("[","");
    paramName.replace("]","");

    if(m_boolActiveSignal){
        emit setValueImage(m_recNo, paramName, paramValue, m_pageReport);
        return paramValue;
    }else{
        if(m_mapOne.contains(paramName)){
            paramValue.load(m_mapOne.value(paramName).toString());
        }else{
            if(m_vlist.length()-1 >= m_pageReport){
                if(m_vlist.at(m_pageReport).toList().length()-1 >= m_recNo){
                    if(m_vlist.at(m_pageReport).toList().at(m_recNo).toMap().contains(paramName)){
                        paramValue.load(m_vlist.at(m_pageReport).toList().at(m_recNo).toMap().value(paramName).toString());
                    }
                }
            }
        }
        return paramValue;
    }

in QtRPT/qtrpt.cpp:
comment in "QtRPT::clearObject() {":
result:
void QtRPT::clearObject() {
//    for (int i=0; i<pageList.size(); i++)
//        delete pageList.at(i);	  // error PySide
    pageList.clear();
}
<<<<<<<<<<<<
in qtrpt.h add new function public:
  void addPage(RptPageObject &page); //Solution Pyside for add page, because -> report.pageList.append(page) "No Works"
in qtrpt.cpp add:
  void QtRPT::addPage(RptPageObject &page)
  {
      pageList.append(&page);
  }
<<<<<<<<<<<<
in qtrpt.h add new class (before the class QtRPT):
    class DataObject : public QObject
    {
	Q_OBJECT
	Q_PROPERTY(QString value READ value WRITE setValue NOTIFY valueChanged)

    public:
	DataObject(QObject *parent=0);
	DataObject(const QString &value, QObject *parent=0);

	QString value() const;
	void setValue(const QString &value);

    signals:
	void valueChanged();

    private:
	QString m_value;
    };
in qtrpt.cpp add:
      DataObject::DataObject(QObject *parent)
	  :QObject(parent)
      {

      }

      DataObject::DataObject(const QString &value, QObject *parent)
	  :QObject(parent), m_value(value)
      {

      }

      QString DataObject::value() const
      {
	  return m_value;
      }

      void DataObject::setValue(const QString &value)
      {
	  if(m_value!=value){
	      m_value=value;
	      emit valueChanged();
	  }
      }
<<<<<<<<<<<<<<
in QtRPT/RptBandObject.h:
replace: void addField(RptFieldObject *field); to void addField(RptFieldObject &field)
in QtRPT/RptBandObject.cpp:
replace "RptBandObject::addField(RptFieldObject *field)" to:
  void RptBandObject::addField(RptFieldObject &field) {
    field.parentBand = this;
    fieldList.append(&field);
}

in QtRPT/RptBandObject.cpp:
comment: "RptBandObject::~RptBandObject()":
result:
RptBandObject::~RptBandObject() {
//    for (int i=0; i<fieldList.size(); i++)
//        delete fieldList.at(i);
    fieldList.clear();
}
<<<<<<<<<<<<<<<
in QtRPT/RptPageObject.h:
replace: void addBand(RptBandObject *band); to void addBand(RptBandObject &band);
in QtRPT/RptPageObject.cpp:
replace "RptPageObject::addBand(RptBandObject *band)" to:
  void RptPageObject::addBand(RptBandObject &band) {
      band.parentReportPage = this;
      bandList.append(&band);
  }

in QtRPT/RptPageObject.cpp:
comment: "RptPageObject::~RptPageObject()":
result:
RptPageObject::~RptPageObject() {
//    for (int i=0; i<bandList.size(); i++)
//        delete bandList.at(i);
    bandList.clear();
}
<<<<<<<<<<<<<<<
in CommonFiles/Barcode.cpp changue:
line 11:
  QLibrary library("QtZint");
  to
  QLibrary library("QtZint.dll");
  
<<<<<<<<<<<<<<<<<<
in CommonFiles/CommonFiles_QtRpt.pri changue:
line 9:
LIBS += -L$${DEST_DIRECTORY}/lib -lQtZint
to
LIBS += -L$${DEST_DIRECTORY} -lQtZint

<<<<<<<<<<<<<<
in qtrpt/RptBandObject.h
replace  BandType type; to QtRptName::BandType type;
<<<<<<<<<<<<<
<<<<<<<<<<<<<<
in qtrpt/RptFieldObject.h
replace  FieldType fieldType; to QtRptName::FieldType fieldType;
<<<<<<<<<<<<<
config build.sh

QTGUI_INC=/usr/lib/qt4/include/QtGui
QTCORE_INC=/usr/lib/qt4/include/QtCore
QTTYPESYSTEM=/usr/lib/python3.4/site-packages/PySide/typesystems

<<<<<<<<<<<<<<
config hybridpy.pro

INCLUDEPATH +=  /usr/lib/python3.4/site-packages/PySide/include/PySide
INCLUDEPATH +=  /usr/lib/python3.4/site-packages/PySide/include/PySide/QtCore
INCLUDEPATH +=  /usr/lib/python3.4/site-packages/PySide/include/PySide/QtGui
INCLUDEPATH +=  /usr/lib/python3.4/site-packages/PySide/include/shiboken
INCLUDEPATH +=  /usr/include/python3.4m
	

LIBS += /usr/lib/libpython3.4m.so.1.0 \
    /usr/lib/python3.4/site-packages/PySide/libshiboken.cpython-34m.so.1.2 \
    /usr/lib/python3.4/site-packages/PySide/libpyside.cpython-34m.so.1.2 \
<<<<<<<<<<<<<

build:
sh build.sh
-create 3 libs in package: PyQtRPT.so, libQtRPTaps.so.1 and libQtZint.so.1

<<<<<<<<<<<<<<<
install libQtRPTaps and libQtZint:
permanently:
    example: sudo cp -f package/libQtRPTaps.so.1 /usr/lib/libQtRPTaps.so.1
    ex: sudo cp -f package/libQtZint.so.1 /usr/lib/libQtZint.so.1
temporary:
    ex: cd package/
        export LD_LIBRARY_PATH=.
<<<<<<<<<<<<<<<<
run examples:
python3 example1.py

<<<<<<<<<<<<<<<<
links:
http://www.qtrpt.tk/
http://lynxline.com/superhybrids-part-2-now-qt-pyside/